function wporg_filter_title( $title ) {
    return 'The ' . $title . ' was filtered';
}
add_filter( 'the_title', 'wporg_filter_title' );





/////////////////////////////////////////////////////////////////
Exemplos #Exemplos
Ação extensível: Formulário de configurações nºAção extensível: formulário de configurações
Se o seu plug-in adiciona um formulário de configurações aos Painéis administrativos, você pode usar
 Ações para permitir que outros plug-ins adicionem suas próprias configurações a ele.

    Foo: 
    Bar: 
   <?php
    do_action( 'wporg_after_settings_page_html' );
}
Agora, outro plug-in pode registrar uma função de retorno de 
chamada para o wporg_after_settings_page_html gancho e injetar novas configurações:

    New 1: 
    <?php
}
add_action( 'wporg_after_settings_page_html', 'myprefix_add_settings' );
Top ↑

Filtro extensível: nº do tipo de postagem personalizadaFiltro extensível: 
tipo de postagem personalizada
Neste exemplo, quando o novo tipo de postagem é registrado,
 os parâmetros que o definem são passados ​​por um filtro, 
 para que outro plugin possa alterá-los antes que o tipo de postagem seja criado.


<?php
function wporg_create_post_type()
{
    $post_type_params = [/* ... */];
 
    register_post_type(
        'post_type_slug',
        apply_filters( 'wporg_post_type_params', $post_type_params )
    );
}
Agora, outro plug-in pode registrar uma função de retorno de 
chamada para o wporg_post_type_paramsgancho e alterar os 
parâmetros de tipo de postagem:

<?php 
function myprefix_change_post_type_params( $post_type_params ) {             
    $post_type_params['hierarchical'] = true;
    return $post_type_params;
} 
add_filter( 'wporg_post_type_params', 'myprefix_change_post_type_params' );
1
2
3
4
5
6
<?php 
function myprefix_change_post_type_params( $post_type_params ) {             
    $post_type_params['hierarchical'] = true;
    return $post_type_params;
} 
add_filter( 'wporg_post_type_params', 'myprefix_change_post_type_params' );





/////////////////////////////////////////////


/**
 * Register the "book" custom post type
 */
function pluginprefix_setup_post_type() {
    register_post_type( 'book', ['public' => true ] ); 
} 
add_action( 'init', 'pluginprefix_setup_post_type' );
 
 
/**
 * Activate the plugin.
 */
 
function pluginprefix_activate() { 
    // Trigger our function that registers the custom post type plugin.
    pluginprefix_setup_post_type(); 
    // Clear the permalinks after the post type has been registered.
    flush_rewrite_rules(); 
}
register_activation_hook( __FILE__, 'pluginprefix_activate' );




function cs_wc_extra_register_fields() {
	?>
	<p class="form-row form-row-first">
		<label for="reg_billing_first_name"><?php _e( 'Nome', 'textdomain' ); ?> <span class="required">*</span></label>
		<input type="text" class="input-text" name="billing_first_name" id="reg_billing_first_name" value="<?php if ( ! empty( $_POST['billing_first_name'] ) ) esc_attr_e( $_POST['billing_first_name'] ); ?>" />
	</p>
	<p class="form-row form-row-last">
		<label for="reg_billing_last_name"><?php _e( 'Sobrenome', 'textdomain' ); ?> <span class="required">*</span></label>
		<input type="text" class="input-text" name="billing_last_name" id="reg_billing_last_name" value="<?php if ( ! empty( $_POST['billing_last_name'] ) ) esc_attr_e( $_POST['billing_last_name'] ); ?>" />
	</p>
	<?php
}

add_action( 'woocommerce_register_form_start', 'cs_wc_extra_register_fields' );

/**
 * Validate the extra register fields.
 *
 * @param  string $username          Current username.
 * @param  string $email             Current email.
 * @param  object $validation_errors WP_Error object.
 *
 * @return void
 */
function cs_wc_validate_extra_register_fields( $username, $email, $validation_errors ) {
	if ( isset( $_POST['billing_first_name'] ) && empty( $_POST['billing_first_name'] ) ) {
		$validation_errors->add( 'billing_first_name_error', __( '<strong>Erro</strong>: Digite o seu nome.', 'textdomain' ) );
	}

	if ( isset( $_POST['billing_last_name'] ) && empty( $_POST['billing_last_name'] ) ) {
		$validation_errors->add( 'billing_last_name_error', __( '<strong>Erro</strong>: Digite o seu sobrenome.', 'textdomain' ) );
	}
}

add_action( 'woocommerce_register_post', 'cs_wc_validate_extra_register_fields', 10, 3 );

/**
 * Save the extra register fields.
 *
 * @param  int  $customer_id Current customer ID.
 *
 * @return void
 */
function cs_wc_save_extra_register_fields( $customer_id ) {
	if ( isset( $_POST['billing_first_name'] ) ) {
		// WordPress default first name field.
		update_user_meta( $customer_id, 'first_name', sanitize_text_field( $_POST['billing_first_name'] ) );

		// WooCommerce billing first name.
		update_user_meta( $customer_id, 'billing_first_name', sanitize_text_field( $_POST['billing_first_name'] ) );
	}

	if ( isset( $_POST['billing_last_name'] ) ) {
		// WordPress default last name field.
		update_user_meta( $customer_id, 'last_name', sanitize_text_field( $_POST['billing_last_name'] ) );

		// WooCommerce billing last name.
		update_user_meta( $customer_id, 'billing_last_name', sanitize_text_field( $_POST['billing_last_name'] ) );
	}
}

add_action( 'woocommerce_created_customer', 'cs_wc_save_extra_register_fields' );


////////////////////////////////////////////////////////////////////////////

// Test to see if WooCommerce is active (including network activated).
$plugin_path = trailingslashit( WP_PLUGIN_DIR ) . 'woocommerce/woocommerce.php';

if (
    in_array( $plugin_path, wp_get_active_and_valid_plugins() )
    || in_array( $plugin_path, wp_get_active_network_plugins() )
) {
    // Custom code here. WooCommerce is active, however it has not 
    // necessarily initialized (when that is important, consider
    // using the `woocommerce_init` action).
}

///////////////////////////////////////////////////////////////////////////////

add_action('get_header', 'pega_titulo');

   function pega_titulo () { 
     $tit = get_the_title();
     if($tit == "Monte seu combo"){
        add_action('woocommerce_before_cart_contents', 'verifica_qtde');
     } else { 
	 echo "Passei pelo init";
     }
}

     function verifica_qtde () {
       global $woocommerce;
       $numero =  $woocommerce->cart->cart_contents_count;
	if (($numero >= 0 )  && ($numero < 2)) {
	   echo '<script> alert("***ATENÇÃO*** É PRECISO PELO MENOS DOIS ITENS PARA FECHAR UM COMBO")  </script>';
       }




/*function woocommerce_button_proceed_to_checkout() {
    $checkout_url = WC()->cart->get_checkout_url();
  
    }*/

/**
 * Register the "book" custom post type
 */

/*function pluginprefix_setup_post_type() {
    register_post_type( 'book', ['public' => true ] ); 
} 
add_action( 'init', 'pluginprefix_setup_post_type' );*/


/**
 * Activate the plugin.
 */
 
/*function activate_ajec-intermediacao() { 
    // Trigger our function that registers the custom post type plugin.
    //pluginprefix_setup_post_type(); 
    // Clear the permalinks after the post type has been registered.
    flush_rewrite_rules(); 
}
register_activation_hook( __FILE__, 'activate_ajec-intermediacao' );

Session::put('variableName', $value);
Session::get('variableName');


    // => not a filter (an action hook)
add_action( 'woocommerce_thankyou', 'custom_woocommerce_auto_complete_paid_order', 10, 1 );

public function custom_woocommerce_auto_complete_paid_order( $order_id ) {
    if ( ! $order_id )
        return;

    $order = new WC_Order( $order_id );

    // No updated status for orders delivered with Bank wire, Cash on delivery and Cheque payment methods.
    if ( get_post_meta($order_id, '_payment_method', true) == 'bacs' || get_post_meta($order_id, '_payment_method', true) == 'cod' || get_post_meta($order_id, '_payment_method', true) == 'cheque' ) {
        return;
     }
    // "completed" updated status for paid "processing" Orders (with all others payment methods)
    elseif ( $order->has_status( 'processing' ) ) {
        $order->update_status( 'completed' );
    }
    else {
        return;
    }
}


<?php 
				$options = get_option( 'ajec_indermediacao_cpt' ) ?: array();?>

				<table class="cpt-table">
				<tr><th>Cliente</th>
				<th>Número Cliente</th>
				<th>Custo da Compra</th>
				<th class="text-center">Taxa da Encomenda</th>
				<th class="text-center">Tipo de encomenda</th>
				<th class="text-center">Tempo para receber</th>
				<th class="text-center">Data de Acção</th>
				<th class="text-center">Acção</th>
				</tr>
				
					
				<?php $public = isset($option['public']) ? "TRUE" : "FALSE";
					$archive = isset($option['has_archive']) ? "TRUE" : "FALSE";
					foreach($infor->dados as $dado){ ?>

					
					<td><?=$dado->nome_para?></td>
					<td><?=$dado->telefone_proprietario?></td>
					<td><?=$dado->valor_intermediacao_nego."".$infor->tip_de_valor?></td>
					<td class="text-center"><?=$dado->taxa_de_intermediacao."".$infor->tip_de_valor?></td>
					<td class="text-center"><?=$dado->tipo_para?></td>
					<td class="text-center"><?=$dado->tempo_de_termino?></td>
					<td class="text-center"><?=$dado->data_de_inicio?></td>
					<td class="text-center">
		
					</td>
				<?php }?>
